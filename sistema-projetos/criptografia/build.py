"""
Script para gerar o execut√°vel da aplica√ß√£o de gerenciamento de projetos
Uso: python build.py
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def check_requirements():
    """Verificar se todas as depend√™ncias est√£o instaladas"""
    print("üîç Verificando depend√™ncias...")
    
    try:
        import PyInstaller
        print("‚úÖ PyInstaller encontrado")
    except ImportError:
        print("‚ùå PyInstaller n√£o encontrado. Instalando...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
    
    # Verificar se o requirements.txt existe
    if not os.path.exists("requirements.txt"):
        print("‚ùå requirements.txt n√£o encontrado!")
        return False
    
    print("‚úÖ Todos os requisitos verificados")
    return True

def install_dependencies():
    """Instalar depend√™ncias do requirements.txt"""
    print("üì¶ Instalando depend√™ncias...")
    
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ Depend√™ncias instaladas com sucesso")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao instalar depend√™ncias")
        return False

def clean_build():
    """Limpar arquivos de build anteriores"""
    print("üßπ Limpando arquivos de build anteriores...")
    
    dirs_to_clean = ["build", "dist", "__pycache__"]
    files_to_clean = ["*.spec"]
    
    for dir_name in dirs_to_clean:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"   Removido: {dir_name}")
    
    # Remover arquivos .spec
    for spec_file in Path(".").glob("*.spec"):
        spec_file.unlink()
        print(f"   Removido: {spec_file}")

def create_executable():
    """Criar o execut√°vel usando PyInstaller"""
    print("üî® Criando execut√°vel...")
    
    # Comando PyInstaller
    cmd = [
        "pyinstaller",
        "--onefile",                    # Arquivo √∫nico
        "--windowed",                   # N√£o mostrar console (Windows)
        "--noconsole",                  # N√£o mostrar console
        "--add-data", "templates;templates",  # Incluir templates
        "--add-data", "static;static",        # Incluir arquivos est√°ticos (se houver)
        "--name", "SistemaProjetos",          # Nome do execut√°vel
        "--icon", "icon.ico",               # √çcone (opcional)
        "--distpath", "dist",               # Pasta de sa√≠da
        "--workpath", "build",              # Pasta de trabalho
        "app.py"                            # Arquivo principal
    ]
    
    # Remover √≠cone se n√£o existir
    if not os.path.exists("icon.ico"):
        cmd = [item for item in cmd if item != "--icon" and item != "icon.ico"]
    
    try:
        subprocess.check_call(cmd)
        print("‚úÖ Execut√°vel criado com sucesso!")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao criar execut√°vel")
        return False

def create_installer_script():
    """Criar script de instala√ß√£o/configura√ß√£o"""
    print("üìã Criando script de instala√ß√£o...")
    
    installer_content = """@echo off
echo ====================================
echo   Sistema de Projetos - Instalacao
echo ====================================
echo.

REM Verificar se o ODBC Driver est√° instalado
echo Verificando ODBC Driver for SQL Server...

REG QUERY "HKEY_LOCAL_MACHINE\\SOFTWARE\\ODBC\\ODBCINST.INI\\ODBC Driver 17 for SQL Server" >nul 2>&1
if %ERRORLEVEL% NEQ 0 (
    echo.
    echo AVISO: ODBC Driver 17 for SQL Server nao encontrado!
    echo.
    echo Para que o sistema funcione corretamente, voce precisa instalar:
    echo "Microsoft ODBC Driver 17 for SQL Server"
    echo.
    echo Download: https://docs.microsoft.com/en-us/sql/connect/odbc/download-odbc-driver-for-sql-server
    echo.
    pause
) else (
    echo ODBC Driver encontrado!
)

echo.
echo Executando Sistema de Projetos...
echo.

REM Executar o sistema
SistemaProjetos.exe

pause
"""
    
    with open("dist/Instalar_e_Executar.bat", "w", encoding="utf-8") as f:
        f.write(installer_content)
    
    print("‚úÖ Script de instala√ß√£o criado: dist/Instalar_e_Executar.bat")

def create_readme():
    """Criar arquivo README para distribui√ß√£o"""
    print("üìÑ Criando arquivo README...")
    
    readme_content = """# Sistema de Projetos

## Como usar:

1. **Primeiro uso:**
   - Execute o arquivo "Instalar_e_Executar.bat" como Administrador
   - Isso verificar√° se o ODBC Driver est√° instalado

2. **Uso normal:**
   - Execute "SistemaProjetos.exe"
   - O sistema abrir√° automaticamente no seu navegador
   - Acesse: http://localhost:5000

## Recursos:

- ‚úÖ Dashboard com estat√≠sticas dos projetos
- ‚úÖ Gr√°fico de Gantt interativo
- ‚úÖ Relat√≥rios de √âpicos com filtros
- ‚úÖ Relat√≥rios de SubTasks com filtros
- ‚úÖ Exporta√ß√£o para CSV
- ‚úÖ Interface responsiva

## Requisitos:

- Windows 7/8/10/11
- Microsoft ODBC Driver 17 for SQL Server
- Conex√£o com o banco de dados SQL Server

## Suporte:

Em caso de problemas:
1. Verifique se o ODBC Driver est√° instalado
2. Verifique a conex√£o com o banco de dados
3. Verifique se a porta 5000 n√£o est√° sendo usada por outro programa

---
Desenvolvido em Python + Flask + Plotly
"""
    
    with open("dist/README.txt", "w", encoding="utf-8") as f:
        f.write(readme_content)
    
    print("‚úÖ README criado: dist/README.txt")

def main():
    """Fun√ß√£o principal do build"""
    print("üöÄ Iniciando build do Sistema de Projetos")
    print("=" * 50)
    
    # Verificar se estamos no diret√≥rio correto
    if not os.path.exists("app.py"):
        print("‚ùå app.py n√£o encontrado! Execute este script na pasta do projeto.")
        return False
    
    # Verificar requisitos
    if not check_requirements():
        return False
    
    # Instalar depend√™ncias
    if not install_dependencies():
        return False
    
    # Limpar build anterior
    clean_build()
    
    # Criar execut√°vel
    if not create_executable():
        return False
    
    # Criar arquivos auxiliares
    create_installer_script()
    create_readme()
    
    # Verificar se o execut√°vel foi criado
    exe_path = "dist/SistemaProjetos.exe"
    if os.path.exists(exe_path):
        size_mb = os.path.getsize(exe_path) / (1024 * 1024)
        print(f"‚úÖ Build conclu√≠do com sucesso!")
        print(f"üìÅ Arquivo criado: {exe_path}")
        print(f"üìè Tamanho: {size_mb:.1f} MB")
        print("=" * 50)
        print("üéâ Pronto para distribui√ß√£o!")
        print("üìÇ Todos os arquivos est√£o na pasta 'dist/'")
        return True
    else:
        print("‚ùå Execut√°vel n√£o foi criado")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\n‚ú® Build finalizado com sucesso!")
        input("\nPressione Enter para sair...")
    else:
        print("\nüí• Build falhou!")
        input("\nPressione Enter para sair...")
        sys.exit(1)